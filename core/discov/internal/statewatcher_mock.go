// Code generated by MockGen. DO NOT EDIT.
// Source: statewatcher.go
//
// Generated by this command:
//
//	mockgen -package internal -destination statewatcher_mock.go -source statewatcher.go etcdConn
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	connectivity "google.golang.org/grpc/connectivity"
)

// MocketcdConn is a mock of etcdConn interface.
type MocketcdConn struct {
	ctrl     *gomock.Controller
	recorder *MocketcdConnMockRecorder
	isgomock struct{}
}

// MocketcdConnMockRecorder is the mock recorder for MocketcdConn.
type MocketcdConnMockRecorder struct {
	mock *MocketcdConn
}

// NewMocketcdConn creates a new mock instance.
func NewMocketcdConn(ctrl *gomock.Controller) *MocketcdConn {
	mock := &MocketcdConn{ctrl: ctrl}
	mock.recorder = &MocketcdConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocketcdConn) EXPECT() *MocketcdConnMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MocketcdConn) GetState() connectivity.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(connectivity.State)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MocketcdConnMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MocketcdConn)(nil).GetState))
}

// WaitForStateChange mocks base method.
func (m *MocketcdConn) WaitForStateChange(ctx context.Context, sourceState connectivity.State) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForStateChange", ctx, sourceState)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForStateChange indicates an expected call of WaitForStateChange.
func (mr *MocketcdConnMockRecorder) WaitForStateChange(ctx, sourceState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForStateChange", reflect.TypeOf((*MocketcdConn)(nil).WaitForStateChange), ctx, sourceState)
}
